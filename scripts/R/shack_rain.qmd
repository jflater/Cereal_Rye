---
title: "Process shack rainfall .dat files"
format: html
---
Read from logger box files, not zipped
```{r}
path <- "C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/Rain_CABBI_Shack/Rain/logger/"
```

```{r}
# Function to read rain data files based on a date range
read_rain_files <- function(path, start_date, end_date) {
  # Generate the sequence of dates from start to end
  date_seq <- seq(ymd(start_date), ymd(end_date), by = "days")
  
  # Create a vector of file names based on date sequence
  file_names <- paste0("shack_logger_", format(date_seq, "%Y_%m_%d"), "_0030.dat")
  
  # Combine with the path to get full file paths
  full_paths <- file.path(path, file_names)
  
  # Filter out non-existing files (optional, for safety)
  existing_files <- full_paths[file.exists(full_paths)]
  
  # If no files exist for the range, return NULL to avoid errors
  if (length(existing_files) == 0) return(NULL)
  
  # Extract column names from the second row of the first valid file
  col_names <- read_csv(existing_files[1], n_max = 1, skip = 1, col_names = FALSE, show_col_types = FALSE) %>%
    unlist() %>%
    as.character()

  # Create an empty list to store each data frame
  data_list <- list()
  
  # Loop over each existing file path
  for (file_path in existing_files) {
    # Read the data from the file, skipping the first row and third and fourth rows
    # Adjust the skip to skip only lines 1, 3, and 4
    data <- read_lines(file_path) %>% 
            .[-c(1:4)] %>%
            paste(collapse = "\n") %>%
            read_csv(col_names = col_names, show_col_types = FALSE)
    
    # Add the processed data frame to the list
    data_list[[file_path]] <- data
  }
  
  # Combine all data frames into one
  combined_data <- bind_rows(data_list)
  
  # Return the combined data frame
  return(combined_data)
}

```

```{r}
new_rain <- read_rain_files(path, "2024-01-01", "2024-12-31")
```

```{r}
process_and_plot_rainfall <- function(data) {
  # Calculate the row means for specified rain columns
  data <- data %>%
    mutate(Mean_Rain = rowMeans(select(., starts_with("Rain_mm"))))

  # Calculate cumulative sum of the row means
  data <- data %>%
    mutate(Cumulative_Rain = cumsum(Mean_Rain))

  # Calculate total rainfall and create a label for it
  total_rainfall <- max(data$Cumulative_Rain)
  label_text <- paste("Total:", total_rainfall, "mm")

  # Plotting the cumulative sum
    p <- ggplot(data, aes(x = TIMESTAMP)) +
    geom_col(aes(y = Mean_Rain), fill = "skyblue", alpha = 0.5) +
    geom_line(aes(y = Cumulative_Rain), color = "blue") +
    geom_text(aes(x = max(TIMESTAMP), y = total_rainfall, label = label_text), hjust = 1.1, vjust = 2.1, check_overlap = TRUE) +
    labs(title = "Cumulative and Mean Rainfall at SABR",
         x = "Time",
         y = "Rainfall (mm)") +
    theme_minimal()
  
  return(list(Data = data, Plot = p))
}
```
```{r}
df <- process_and_plot_rainfall(new_rain)
print(df$Plot)
```

```{r}
recent_rain <- new_rain |> 
  select(!Rain_mm_2_Tot) |> 
  process_and_plot_rainfall()

# To view the plot
print(recent_rain$Plot)

# To access the data
recent_rain_data <- recent_rain$Data
tail(recent_rain_data)
```

```{r}
# Function to process rainfall data and plot individual gauges side by side
process_and_plot_rainfall_gauges <- function(data) {
  # Reshape data from wide to long format, where each gauge becomes a separate observation
  data_long <- data %>%
    pivot_longer(
      cols = starts_with("Rain_mm"),
      names_to = "Gauge",
      values_to = "Rainfall_mm"
    ) 

  # Plotting individual gauges with different colors
  p <- ggplot(data_long, aes(x = TIMESTAMP, y = Rainfall_mm, fill = Gauge)) +
    geom_bar(stat = "identity", position = "dodge") +  
    scale_y_continuous(breaks = seq(0, max(data_long$Rainfall_mm, na.rm = TRUE) + 0.5, by = 0.5)) +  # Custom y-axis breaks
    labs(title = "Rainfall Measurements by Gauge",
         x = "Time",
         y = "Rainfall (mm)") +
    scale_fill_manual(values = c("skyblue", "orange", "green", "red")) +  # Customize colors for each gauge
    theme_minimal() +
    theme(legend.title = element_blank())  # Hide the legend title

  # Return the plot
  return(p)
}

result_plot <- process_and_plot_rainfall_gauges(new_rain)
print(result_plot)

```

<!-- Save data, this is raw so we will need to remove bad gauges when plotting -->
<!-- We need to append new data to combined data -->
<!-- ```{r} -->
<!-- max(combined_data$TIMESTAMP) -->
<!-- ``` -->
<!-- We need to get the files from `r max(combined_data$TIMESTAMP)` to now -->
<!-- ```{r} -->
<!-- new_rain <- read_rain_files(path, "2024-06-14", "2024-06-24") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- head(new_rain) -->
<!-- head(combined_data) -->
<!-- ``` -->
<!-- ```{r} -->
<!-- rain <- bind_rows(combined_data, new_rain) -->
<!-- ``` -->
<!-- ```{r} -->
<!-- head(rain) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- tail(rain) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # Count duplicates in the column -->
<!-- duplicate_counts <- table(rain$TIMESTAMP) -->

<!-- # Filter counts to find duplicates -->
<!-- duplicate_counts[duplicate_counts > 1] -->
<!-- ``` -->

<!-- ```{r} -->
<!-- any(duplicated(rain$RECORD)) -->
<!-- any(duplicated(rain$TIMESTAMP)) -->
<!-- ``` -->

Let's drop the record column

```{r}
rain_data <- new_rain |>
  select(!RECORD)
```

```{r}
combined_data_cumulative <- rain_data %>%
  mutate(
    Cum_Rain_mm_1_Tot = cumsum(Rain_mm_1_Tot),
    Cum_Rain_mm_2_Tot = cumsum(Rain_mm_2_Tot),
    Cum_Rain_mm_3_Tot = cumsum(Rain_mm_3_Tot),
    Cum_Rain_mm_4_Tot = cumsum(Rain_mm_4_Tot)
  )

rain_data_long <- combined_data_cumulative |> 
  pivot_longer(cols = starts_with("Cum_Rain_mm"),
               names_to = "Guage",
               values_to = "Cum_Rain_mm")

ggplot(rain_data_long, aes(x = TIMESTAMP, y = Cum_Rain_mm, color = Guage, group = Guage)) +
  geom_line() +
  labs(x = "Time", y = "Rainfall (mm)") +
  theme_minimal()
```

We should check against the small drainage plots, but for now let's just use gauges 1 and 4

```{r}
rain_mean <- rain_data %>% 
  select(-Rain_mm_2_Tot, -Rain_mm_3_Tot) %>%
  mutate(Mean_Rain = rowMeans(across(starts_with("Rain_mm")))) 

head(rain_mean)

write_csv(x = rain_mean, file = "../../data/SABR_Shack_mean_rain.csv")
```
