# For the secondary monitor, assume portrait orientation: swap width and height.
sec_dims_portrait <- rev(sec_dims)
# --- Layout Coordinates ---
gap_in <- 0  # gap in inches between monitors
# Coordinates for secondary monitor (portrait) placed on the left.
sec_xmin <- 0
sec_xmax <- sec_dims_portrait[1]
sec_ymin <- 0
sec_ymax <- sec_dims_portrait[2]
# Coordinates for main monitor (landscape) placed on the right.
main_xmin <- sec_xmax + gap_in
main_xmax <- main_xmin + main_dims[1]
main_ymin <- 0
main_ymax <- main_dims[2]
# Build a data frame for plotting both monitors.
df <- data.frame(
monitor = c("Secondary", "Main"),
xmin    = c(sec_xmin, main_xmin),
xmax    = c(sec_xmax, main_xmax),
ymin    = c(sec_ymin, main_ymin),
ymax    = c(sec_ymax, main_ymax),
label   = c(
paste0(
sec_name, "\n",
sec_res[1], "x", sec_res[2], " ", sec_diag, "\"", "\n",
round(sec_ppi, 1), " PPI\n",
round(sec_pixel_pitch, 3), " mm pitch"
),
paste0(
main_name, "\n",
main_res[1], "x", main_res[2], " ", main_diag, "\"", "\n",
round(main_ppi, 1), " PPI\n",
round(main_pixel_pitch, 3), " mm pitch"
)
)
)
# Create the plot.
p <- ggplot(df, aes(fill = monitor)) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
color = "black", alpha = 0.3) +
geom_text(aes(x = (xmin + xmax) / 2, y = (ymin + ymax) / 2, label = label),
size = 4) +
coord_fixed(ratio = 1) +
theme_void() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold")) +
ggtitle("Dual Monitor Setup")
return(p)
}
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3840, 2160), main_diag = 31.5, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(3840, 2160), sec_diag = 27, sec_name  = '27" 4K IPS (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 34, main_name = '34" QHD Ultrawide',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" QHD (Portrait)'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 33.94, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" 2K IPS (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 34, main_name = '34" QHD Ultrawide',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" QHD (Portrait)'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
# Define the function to create the dual-monitor plot.
plot_dual_monitor_setup <- function(
main_res, main_diag, main_name,    # main monitor: resolution (c(width, height)), diagonal (inches), name
sec_res, sec_diag, sec_name         # secondary monitor: resolution (c(width, height)), diagonal, name
) {
# Helper: Calculate PPI from resolution and diagonal size.
calc_ppi <- function(width_px, height_px, diag_in) {
sqrt(width_px^2 + height_px^2) / diag_in
}
# Helper: Calculate physical dimensions (in inches) in landscape orientation.
calc_dims <- function(width_px, height_px, diag_in) {
aspect <- width_px / height_px
height_in <- diag_in / sqrt(aspect^2 + 1)
width_in <- aspect * height_in
return(c(width_in, height_in))  # returns c(width, height)
}
# --- Main Monitor Calculations ---
main_ppi <- calc_ppi(main_res[1], main_res[2], main_diag)
main_pixel_pitch <- 25.4 / main_ppi
main_dims <- calc_dims(main_res[1], main_res[2], main_diag)
# --- Secondary Monitor Calculations ---
sec_ppi <- calc_ppi(sec_res[1], sec_res[2], sec_diag)
sec_pixel_pitch <- 25.4 / sec_ppi
sec_dims <- calc_dims(sec_res[1], sec_res[2], sec_diag)
# For the secondary monitor, assume portrait orientation: swap width and height.
sec_dims_portrait <- rev(sec_dims)
# --- Layout Coordinates ---
gap_in <- 0  # gap in inches between monitors
# Coordinates for secondary monitor (portrait) placed on the left.
sec_xmin <- 0
sec_xmax <- sec_dims_portrait[1]
sec_ymin <- 4
sec_ymax <- sec_dims_portrait[2]
# Coordinates for main monitor (landscape) placed on the right.
main_xmin <- sec_xmax + gap_in
main_xmax <- main_xmin + main_dims[1]
main_ymin <- 0
main_ymax <- main_dims[2]
# Build a data frame for plotting both monitors.
df <- data.frame(
monitor = c("Secondary", "Main"),
xmin    = c(sec_xmin, main_xmin),
xmax    = c(sec_xmax, main_xmax),
ymin    = c(sec_ymin, main_ymin),
ymax    = c(sec_ymax, main_ymax),
label   = c(
paste0(
sec_name, "\n",
sec_res[1], "x", sec_res[2], " ", sec_diag, "\"", "\n",
round(sec_ppi, 1), " PPI\n",
round(sec_pixel_pitch, 3), " mm pitch"
),
paste0(
main_name, "\n",
main_res[1], "x", main_res[2], " ", main_diag, "\"", "\n",
round(main_ppi, 1), " PPI\n",
round(main_pixel_pitch, 3), " mm pitch"
)
)
)
# Create the plot.
p <- ggplot(df, aes(fill = monitor)) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
color = "black", alpha = 0.3) +
geom_text(aes(x = (xmin + xmax) / 2, y = (ymin + ymax) / 2, label = label),
size = 4) +
coord_fixed(ratio = 1) +
theme_void() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold")) +
ggtitle("Dual Monitor Setup")
return(p)
}
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 33.94, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" 2K IPS (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 34, main_name = '34" QHD Ultrawide',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" QHD (Portrait)'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
# Define the function to create the dual-monitor plot.
plot_dual_monitor_setup <- function(
main_res, main_diag, main_name,    # main monitor: resolution (c(width, height)), diagonal (inches), name
sec_res, sec_diag, sec_name         # secondary monitor: resolution (c(width, height)), diagonal, name
) {
# Helper: Calculate PPI from resolution and diagonal size.
calc_ppi <- function(width_px, height_px, diag_in) {
sqrt(width_px^2 + height_px^2) / diag_in
}
# Helper: Calculate physical dimensions (in inches) in landscape orientation.
calc_dims <- function(width_px, height_px, diag_in) {
aspect <- width_px / height_px
height_in <- diag_in / sqrt(aspect^2 + 1)
width_in <- aspect * height_in
return(c(width_in, height_in))  # returns c(width, height)
}
# --- Main Monitor Calculations ---
main_ppi <- calc_ppi(main_res[1], main_res[2], main_diag)
main_pixel_pitch <- 25.4 / main_ppi
main_dims <- calc_dims(main_res[1], main_res[2], main_diag)
# --- Secondary Monitor Calculations ---
sec_ppi <- calc_ppi(sec_res[1], sec_res[2], sec_diag)
sec_pixel_pitch <- 25.4 / sec_ppi
sec_dims <- calc_dims(sec_res[1], sec_res[2], sec_diag)
# For the secondary monitor, assume portrait orientation: swap width and height.
sec_dims_portrait <- rev(sec_dims)
# --- Layout Coordinates ---
gap_in <- 0  # gap in inches between monitors
# Coordinates for secondary monitor (portrait) placed on the left.
sec_xmin <- 0
sec_xmax <- sec_dims_portrait[1]
sec_ymin <- -4
sec_ymax <- sec_dims_portrait[2]
# Coordinates for main monitor (landscape) placed on the right.
main_xmin <- sec_xmax + gap_in
main_xmax <- main_xmin + main_dims[1]
main_ymin <- 0
main_ymax <- main_dims[2]
# Build a data frame for plotting both monitors.
df <- data.frame(
monitor = c("Secondary", "Main"),
xmin    = c(sec_xmin, main_xmin),
xmax    = c(sec_xmax, main_xmax),
ymin    = c(sec_ymin, main_ymin),
ymax    = c(sec_ymax, main_ymax),
label   = c(
paste0(
sec_name, "\n",
sec_res[1], "x", sec_res[2], " ", sec_diag, "\"", "\n",
round(sec_ppi, 1), " PPI\n",
round(sec_pixel_pitch, 3), " mm pitch"
),
paste0(
main_name, "\n",
main_res[1], "x", main_res[2], " ", main_diag, "\"", "\n",
round(main_ppi, 1), " PPI\n",
round(main_pixel_pitch, 3), " mm pitch"
)
)
)
# Create the plot.
p <- ggplot(df, aes(fill = monitor)) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
color = "black", alpha = 0.3) +
geom_text(aes(x = (xmin + xmax) / 2, y = (ymin + ymax) / 2, label = label),
size = 4) +
coord_fixed(ratio = 1) +
theme_void() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold")) +
ggtitle("Dual Monitor Setup")
return(p)
}
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 33.94, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" 2K IPS (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 34, main_name = '34" QHD Ultrawide',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" QHD (Portrait)'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
# Define the function to create the dual-monitor plot.
plot_dual_monitor_setup <- function(
main_res, main_diag, main_name,    # main monitor: resolution (c(width, height)), diagonal (inches), name
sec_res, sec_diag, sec_name         # secondary monitor: resolution (c(width, height)), diagonal, name
) {
# Helper: Calculate PPI from resolution and diagonal size.
calc_ppi <- function(width_px, height_px, diag_in) {
sqrt(width_px^2 + height_px^2) / diag_in
}
# Helper: Calculate physical dimensions (in inches) in landscape orientation.
calc_dims <- function(width_px, height_px, diag_in) {
aspect <- width_px / height_px
height_in <- diag_in / sqrt(aspect^2 + 1)
width_in <- aspect * height_in
return(c(width_in, height_in))  # returns c(width, height)
}
# --- Main Monitor Calculations ---
main_ppi <- calc_ppi(main_res[1], main_res[2], main_diag)
main_pixel_pitch <- 25.4 / main_ppi
main_dims <- calc_dims(main_res[1], main_res[2], main_diag)
# --- Secondary Monitor Calculations ---
sec_ppi <- calc_ppi(sec_res[1], sec_res[2], sec_diag)
sec_pixel_pitch <- 25.4 / sec_ppi
sec_dims <- calc_dims(sec_res[1], sec_res[2], sec_diag)
# For the secondary monitor, assume portrait orientation: swap width and height.
sec_dims_portrait <- rev(sec_dims)
# --- Layout Coordinates ---
gap_in <- 0  # gap in inches between monitors
# Coordinates for secondary monitor (portrait) placed on the left.
sec_xmin <- 0
sec_xmax <- sec_dims_portrait[1]
sec_ymin <- 0
sec_ymax <- sec_dims_portrait[2]
# Coordinates for main monitor (landscape) placed on the right.
main_xmin <- sec_xmax + gap_in
main_xmax <- main_xmin + main_dims[1]
main_ymin <- 0
main_ymax <- main_dims[2]
# Build a data frame for plotting both monitors.
df <- data.frame(
monitor = c("Secondary", "Main"),
xmin    = c(sec_xmin, main_xmin),
xmax    = c(sec_xmax, main_xmax),
ymin    = c(sec_ymin, main_ymin),
ymax    = c(sec_ymax, main_ymax),
label   = c(
paste0(
sec_name, "\n",
sec_res[1], "x", sec_res[2], " ", sec_diag, "\"", "\n",
round(sec_ppi, 1), " PPI\n",
round(sec_pixel_pitch, 3), " mm pitch"
),
paste0(
main_name, "\n",
main_res[1], "x", main_res[2], " ", main_diag, "\"", "\n",
round(main_ppi, 1), " PPI\n",
round(main_pixel_pitch, 3), " mm pitch"
)
)
)
# Create the plot.
p <- ggplot(df, aes(fill = monitor)) +
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
color = "black", alpha = 0.3) +
geom_text(aes(x = (xmin + xmax) / 2, y = (ymin + ymax) / 2, label = label),
size = 4) +
coord_fixed(ratio = 1) +
theme_void() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold")) +
ggtitle("Dual Monitor Setup")
return(p)
}
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 33.94, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" 2K IPS (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 34, main_name = '34" QHD Ultrawide',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" QHD (Portrait)'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 33.94, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(2560, 1440), sec_diag = 26.5, sec_name  = '27" 2K IPS (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 34, main_name = '34" QHD Ultrawide',
sec_res  = c(2560, 1440), sec_diag = 27, sec_name  = '27" QHD (Portrait)'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 33.94, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(2560, 1440), sec_diag = 26.5, sec_name  = 'Asus 240 hz 27" 2K OLED (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3840, 2160), main_diag = 26.5, main_name = '27" 4k Oled',
sec_res  = c(3840, 2160), sec_diag = 26.5, sec_name  = '27" 4k IPS'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
.229/0.153
0.153/.229
# Figure 1: High-PPI Mismatch Setup
# Main: 32" 4K OLED (landscape), Secondary: 27" 4K IPS (portrait)
fig1 <- plot_dual_monitor_setup(
main_res = c(3440, 1440), main_diag = 33.94, main_name = 'Asus 240 hz 32" 4K OLED',
sec_res  = c(2560, 1440), sec_diag = 26.5, sec_name  = 'Asus 240 hz 27" 2K OLED (Portrait)'
)
# Figure 2: Matched-PPI Setup
# Main: 34" QHD Ultrawide (landscape), Secondary: 27" QHD (portrait)
fig2 <- plot_dual_monitor_setup(
main_res = c(3840, 2160), main_diag = 26.5, main_name = 'ROG Swift OLED PG27UCDM 4k',
sec_res  = c(3840, 2160), sec_diag = 26.5, sec_name  = 'ROG Swift OLED PG27UCDM 4k'
)
# Arrange and display the two figures vertically.
grid.arrange(fig1, fig2, ncol = 1)
rain <- read_csv("data/SABR_Shack_mean_rain.csv", show_col_types = FALSE)
str(rain)
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain)) +
geom_point()
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain)) +
geom_col()
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain)) +
geom_point()
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, fill = Mean_Rain)) +
geom_point()
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point()
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
theme_sabr
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
theme_sabr()
# Load necessary packages
library(lubridate)
library(ggplot2)
library(zoo)
library(conflicted)
library(lme4)
library(emmeans)
library(broom)
library(knitr)
library(kableExtra)
library(stringr)
library(tidyr)
library(scales)
library(readr)
library(dplyr)
library(car)
library(rstatix)
library(janitor)
conflict_prefer("filter", "dplyr")
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
theme_sabr()
# --- Theme & Colors  ---
treatment_colors <- c(
"Corn" = "#fda500",
"Soy" = "#E9967A",
"Sorghum" = "#D2B48C",
"Sorghum + Rye" = "#8B4513"
)
theme_sabr <- function(base_size = 14) {
theme_minimal(base_size = base_size) +
theme(
axis.title = element_text(size = base_size + 2),
axis.text = element_text(size = base_size),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = base_size),
legend.text = element_text(size = base_size - 1),
strip.text = element_text(size = base_size + 2),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_blank()
)
}
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
theme_sabr()
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
scale_color_manual(values = "white")
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
scale_color_manual(values = c("white"))
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
theme_sabr()
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
theme_sabr() +
scale_color_gradient(low = "white", high = "black")
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain, color = Mean_Rain)) +
geom_point() +
theme_sabr() +
scale_color_gradient(low = "gray", high = "black")
rain %>%
ggplot(aes(x = TIMESTAMP, y = Mean_Rain)) +
# Plot points where Mean_Rain == 0 in white
geom_point(data = filter(rain, Mean_Rain == 0),
color = "white", size = 3) +
# Plot points where Mean_Rain > 0 with a gray-to-black gradient
geom_point(data = filter(rain, Mean_Rain > 0),
aes(color = Mean_Rain), size = 3) +
scale_color_gradient(low = "gray", high = "black") +
theme_sabr()
View(rain)
rain <- read_csv("data/SABR_Shack_mean_rain.csv", show_col_types = FALSE)
str(rain)
rain %>%
group_by(day(TIMESTAMP)) %>%
summarise(Mean_Rain)
rain %>%
group_by(day(TIMESTAMP)) %>%
summarise(sum = Mean_Rain)
rain %>%
group_by(day(TIMESTAMP)) %>%
mutate(sum = Mean_Rain)
rain %>%
group_by(ymd(TIMESTAMP)) %>%
mutate(sum = Mean_Rain)
rain %>%
group_by(ymd(as.Date(TIMESTAMP))) %>%
mutate(sum = Mean_Rain)
rain %>%
group_by(ymd(as.Date(TIMESTAMP))) %>%
summarise(sum = Mean_Rain)
rain %>%
group_by(ymd(as.Date(TIMESTAMP))) %>%
summarise(sum = sum(Mean_Rain))
View(rain)
