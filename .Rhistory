getwd()
getwd()
getwd()
getwd()
path_to_files <- "../../data/raw/"
files <- file(path_to_files)
files
# Path to raw files
path_to_files <- "../../data/raw/"
# Save files to a list
files <- list.files(path_to_files, pattern = "*.json", full.names = TRUE)
files
install.packages("tools")
library(tools)
unique_files <- files[!duplicated(file_path_sans_ext(basename(files)))]
unique_files
?file_path_sans_ext
library(stringr)
library(stringr)
cleaned_base_names <- str_remove(basename(files), " \\d+$")
unique_files <- files[!duplicated(cleaned_base_names)]
unique_files
str_remove(basename(files), " \\d+$")
basename(files)
str_remove(basename(files), " .json")
str_remove(basename(files), " *.json")
str_remove(basename(files), " ")
str_remove(basename(files), " \d+\.json$")
str_remove(basename(files), " \d+\.json$")
str_remove(basename(files), " \\d+\.json$")
str_remove(basename(files), " \\d+\$")
str_remove(basename(files), " \\d+")
library(stringr)
cleaned_base_names <- str_remove(basename(files), " \\d+")
unique_files <- files[!duplicated(cleaned_base_names)]
unique_files
setdiff(files, unique_files)
duplicated(cleaned_base_names)
files[!duplicated(cleaned_base_names)]
# Path to raw files
path_to_files <- "../../data/raw/"
# Save files to a list
files <- list.files(path_to_files, pattern = "*.json", full.names = TRUE)
files
library(stringr)
cleaned_base_names <- str_remove(basename(files), " \\d+")
cleaned_base_names
# Path to raw files
path_to_files <- "../../data/raw/"
# Save files to a list
files <- list.files(path_to_files, pattern = "*.json", full.names = F)
files
library(stringr)
cleaned_base_names <- str_remove(basename(files), " \\d+")
cleaned_base_names
unique(cleaned_base_names)
files_to_process <- unique(cleaned_base_names)
setdiff(files, files_to_process)
# Path to raw files
path_to_files <- "../../data/raw/"
duplicates_folder <- "../../data/duplicates/"
# Create the duplicates folder if it doesn't exist
if (!dir.exists(duplicates_folder)) {
dir.create(duplicates_folder, recursive = TRUE)
}
# Save files to a list
files <- list.files(path_to_files, pattern = "*.json", full.names = F)
files
library(stringr)
# Clean base names by removing spaces and numeric suffixes
cleaned_base_names <- str_remove(basename(files), " \\d+")
cleaned_base_names
# Keep only unique cleaned file names
files_to_process <- unique(cleaned_base_names)
files_to_process
# Check which files were removed
duplicates_removed <- setdiff(files, files_to_process)
duplicates_removed
# Move duplicate files to the duplicates folder
file.rename(file.path(path_to_files, duplicates_removed),
file.path(duplicates_folder, duplicates_removed))
# Path to raw files
path_to_files <- "../../data/raw/"
duplicates_folder <- "../../data/duplicates/"
# Create the duplicates folder if it doesn't exist
if (!dir.exists(duplicates_folder)) {
dir.create(duplicates_folder, recursive = TRUE)
}
# Save files to a list
files <- list.files(path_to_files, pattern = "*.json", full.names = F)
files
library(stringr)
# Clean base names by removing spaces and numeric suffixes
cleaned_base_names <- str_remove(basename(files), "\\d+")
cleaned_base_names
# Keep only unique cleaned file names
files_to_process <- unique(cleaned_base_names)
files_to_process
files <-  "../../data/raw/"
basename(files)
files <-  "../../data/raw/"
basename(files)
path_to_files <-  "../../data/raw/"
files <- list.files(path_to_files, pattern = "*.csv", full.names = F)
files
path_to_files <-  "../../data/raw"
files <- list.files(path_to_files, pattern = "*.csv", full.names = F)
files
path_to_files <-  "../../data/processed/"
files <- list.files(path_to_files, pattern = "*.csv", full.names = F)
files
first_file <- file.path(path_to_files, files[1])
first_file <- file.path(path_to_files, files[1])
data <- read.csv(first_files)
first_file <- file.path(path_to_files, files[1])
data <- read.csv(first_file)
head_data
first_file <- file.path(path_to_files, files[1])
data <- read.csv(first_file)
head(data)
first_file <- file.path(path_to_files, files[1])
data <- read.csv(first_file, skip = 1)
head(data)
first_file <- file.path(path_to_files, files[1])
data <- read.csv(first_file, skip = 1, header = F)
head(data)
first_file <- file.path(path_to_files, files[1])
# Read the file, skipping the first row and appending the second row to headers
raw_data <- read.csv(first_file, skip = 1, header = FALSE)
headers <- paste0(raw_data[1, ], "_", raw_data[2, ])
# Assign new headers and remove the first two rows
colnames(raw_data) <- headers
data <- raw_data[-c(1, 2), ]
head(data)
colnames(data)
View(data)
library(dplyr)
data <- data %>% mutate(plot = as.numeric(gsub(".*_(\\d+)$", "\\1", LABEL_[1])))
library(dplyr)
data <- data %>% mutate(plot = as.numeric(gsub(".*_(\\d+)$", "\\1", 'LABEL_[#]')))
head(data)
View(data)
library(dplyr)
data <- data %>% mutate(plot = as.numeric(gsub(".*_(\\d+)$", "\\1", `LABEL_[#]`)))
head(data)
library(dplyr)
data <- data %>% mutate(plot = as.numeric(gsub(".*_(\\d+)$", "\\1", `LABEL_[#]`)))
head(data)
library(dplyr)
data <- data %>% mutate(plot = as.numeric(gsub(".*_(\\d+)$", "\\1", `LABEL_[#]`)))
head(data)
View(data)
as.numeric(gsub(".*_(\\d+)$", "\\1", `LABEL_[#]`))
library(dplyr)
data <- data %>% mutate(plot = as.numeric(gsub(".*_(\\d+)$", "\\1", `LABEL_[#]`)))
head(data)
View(data)
data$`LABEL_[#]`
library(dplyr)
data <- data %>% mutate(
plot = as.numeric(gsub("_(\\d+).*", "\\1", `LABEL_[#]`)),
location = gsub(".*_(i|r).*", "\\1", `LABEL_[#]`)
)
head(data)
View(data)
library(dplyr)
library(tidyr)
data <- data %>% separate(`LABEL_[#]`, into = c("element1", "element2", "element3", "element4"), sep = "[_-]", fill = "right")
head(data)
View(data)
path_to_files <-  "../../data/processed/"
files <- list.files(path_to_files, pattern = "*.csv", full.names = F)
files
first_file <- file.path(path_to_files, files[1])
# Read the file, skipping the first row and appending the second row to headers
raw_data <- read.csv(first_file, skip = 1, header = FALSE)
headers <- paste0(raw_data[1, ], "_", raw_data[2, ])
# Assign new headers and remove the first two rows
colnames(raw_data) <- headers
data <- raw_data[-c(1, 2), ]
head(data)
colnames(data)
library(dplyr)
library(tidyr)
data <- data %>% separate(`LABEL_[#]`, into = c("element1", "element2", "element3", "element4"), sep = "[_-]", fill = "right")
head(data)
View(data)
path_to_files <-  "../../data/processed/"
files <- list.files(path_to_files, pattern = "*.csv", full.names = F)
files
first_file <- file.path(path_to_files, files[1])
# Read the file, skipping the first row and appending the second row to headers
raw_data <- read.csv(first_file, skip = 1, header = FALSE)
headers <- paste0(raw_data[1, ], "_", raw_data[2, ])
# Assign new headers and remove the first two rows
colnames(raw_data) <- headers
data <- raw_data[-c(1, 2), ]
head(data)
colnames(data)
library(dplyr)
library(tidyr)
data <- data %>% separate(`LABEL_[#]`, into = c("plot", "location", "element3", "element4"), sep = "[_-]", fill = "right")
head(data)
data <- data %>% mutate(matching = element1 == element2)
data <- data %>%
group_by(element1, element2) %>%
mutate(has_match = n() > 1) %>%
ungroup()
data <- data %>%
group_by(plot, location) %>%
mutate(has_match = n() > 1) %>%
ungroup()
head(data)
View(data)
data %>% select(has_match == TRUE)
data %>% filter(has_match == TRUE)
matching_rows <- data %>% filter(has_match == TRUE)
View(data)
colnames(data)
path_to_files <-  "../../data/processed/"
files <- list.files(path_to_files, pattern = "*.csv", full.names = F)
files
first_file <- file.path(path_to_files, files[1])
# Read the file, skipping the first row and appending the second row to headers
raw_data <- read.csv(first_file, skip = 1, header = FALSE)
headers <- paste0(raw_data[1, ], "_", raw_data[2, ])
# Assign new headers and remove the first two rows
colnames(raw_data) <- headers
data <- raw_data[-c(1, 2), ]
head(data)
colnames(data)
library(dplyr)
library(tidyr)
data <- data %>% separate(`LABEL_[#]`, into = c("plot", "location", "element3", "element4"), sep = "[_-]", fill = "right")
head(data)
data <- data %>%
group_by(plot, location) %>%
mutate(has_match = n() > 1) %>%
ungroup()
head(data)
matching_rows <- data %>% filter(has_match == TRUE)
matching_rows <- data %>% dplyr::filter(has_match == TRUE)
head(matching_rows)
matching_rows <- data %>% dplyr::filter(has_match == TRUE) %>%
select(`DATE_TIME initial_value_[YYYY-MM-DD HH:MM:SS]`, plot, location, element3, element4)
head(matching_rows)
View(data)
matching_rows
colnames(data)
matching_rows <- data %>% dplyr::filter(has_match == TRUE) %>%
select(`DATE_TIME initial_value_[YYYY-MM-DD HH:MM:SS]`, plot, location, element3, element4, `FN2O_DRY_[nmol+1m-2s-1]`, `FN2O_DRY LIN_[nmol+1m-2s-1]`, `FN2O_DRY LIN_R2_[#]`)
matching_rows
matching_rows <- data %>% dplyr::filter(has_match == TRUE) %>%
select(`DATE_TIME initial_value_[YYYY-MM-DD HH:MM:SS]`, plot, location, element3, element4, `FN2O_DRY_[nmol+1m-2s-1]`, `FN2O_DRY LIN_[nmol+1m-2s-1]`, `FN2O_DRY R2_[#]`, `FN2O_DRY LIN_R2_[#]`)
matching_rows
selected_rows <- data %>%
group_by(plot, location) %>%
slice_max(order_by = pmax(as.numeric(`FN2O_DRY R2_[#]`), as.numeric(`FN2O_DRY LIN_R2_[#]`), na.rm = TRUE)) %>%
ungroup()
head(selected_rows)
selected_rows <- matching_rows %>%
group_by(plot, location) %>%
slice_max(order_by = pmax(as.numeric(`FN2O_DRY R2_[#]`), as.numeric(`FN2O_DRY LIN_R2_[#]`), na.rm = TRUE)) %>%
ungroup()
head(selected_rows)
