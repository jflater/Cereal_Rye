# The generated PDF file will have the same base name as the .tex file, but with a .pdf extension.
pdf_file <- sub("\\.tex$", ".pdf", tex_file)
# Create the target directory if needed and copy the PDF to file_name.
dir.create(dirname(file_name), showWarnings = FALSE, recursive = TRUE)
file.copy(pdf_file, file_name, overwrite = TRUE)
message("PDF table saved to: ", file_name)
}
publish_table(
contrast_flux_summary,
caption   = "Cumulative N₂O Flux",
file_name = "tables/figure1n2o_table.pdf",
digits    = 2,
engine    = "xelatex",
scale_table = TRUE  # scales the table to fit the page width
)
# ==============================================================================
# Table Generation and Export as Publication-Ready PDFs
# ==============================================================================
# Define a function to generate and export a LaTeX table as a PDF.
# This function un-groups the data, replaces underscores in column names with spaces,
# and removes extra line spacing.
publish_table <- function(data, caption, file_name, digits = 2, engine = "xelatex", scale_table = TRUE) {
# Load required packages
if (!requireNamespace("dplyr", quietly = TRUE)) stop("Please install 'dplyr'")
if (!requireNamespace("stringr", quietly = TRUE)) stop("Please install 'stringr'")
if (!requireNamespace("knitr", quietly = TRUE)) stop("Please install 'knitr'")
if (!requireNamespace("kableExtra", quietly = TRUE)) stop("Please install 'kableExtra'")
if (!requireNamespace("tinytex", quietly = TRUE)) stop("Please install 'tinytex'")
library(dplyr)
library(stringr)
library(knitr)
library(kableExtra)
library(tinytex)
# Process the data: ungroup and replace underscores in column names with spaces.
table_processed <- data %>% ungroup()
colnames(table_processed) <- gsub("_", " ", colnames(table_processed))
# Create the LaTeX table using kable and kableExtra.
# Set float = FALSE so that no table environment is created.
table_latex <- kable(
table_processed,
format   = "latex",
booktabs = TRUE,
caption  = caption,
digits   = digits,
escape   = FALSE
)
# Remove any extra \addlinespace commands.
table_latex <- gsub("\\\\addlinespace", "", table_latex)
# Optionally wrap the table in an adjustbox environment to scale it to the text width.
if (scale_table) {
table_latex <- paste0("\\begin{adjustbox}{max width=\\textwidth}\n",
table_latex,
"\n\\end{adjustbox}")
}
# Build a minimal LaTeX document.
if (engine == "xelatex") {
latex_doc <- paste0(
"\\documentclass{article}\n",
"\\usepackage{fontspec}\n",
"\\usepackage{graphicx}\n",
"\\usepackage{booktabs}\n",
"\\usepackage{adjustbox}\n",
"\\usepackage{geometry}\n",
"\\geometry{margin=1in}\n",
"\\begin{document}\n",
table_latex,
"\n\\end{document}"
)
} else {
latex_doc <- paste0(
"\\documentclass{article}\n",
"\\usepackage[utf8]{inputenc}\n",
"\\usepackage{graphicx}\n",
"\\usepackage{booktabs}\n",
"\\usepackage{adjustbox}\n",
"\\usepackage{geometry}\n",
"\\geometry{margin=1in}\n",
"\\begin{document}\n",
table_latex,
"\n\\end{document}"
)
}
# Write the LaTeX document to a temporary .tex file.
tex_file <- tempfile(fileext = ".tex")
writeLines(latex_doc, tex_file)
# Compile the .tex file to PDF using the specified engine.
if (engine == "xelatex") {
tinytex::xelatex(tex_file)
} else {
tinytex::pdflatex(tex_file)
}
# The generated PDF file will have the same base name as the .tex file, but with a .pdf extension.
pdf_file <- sub("\\.tex$", ".pdf", tex_file)
# Create the target directory if needed and copy the PDF to file_name.
dir.create(dirname(file_name), showWarnings = FALSE, recursive = TRUE)
file.copy(pdf_file, file_name, overwrite = TRUE)
message("PDF table saved to: ", file_name)
}
## Figure 1 Table: Cumulative N Losses Summary
figure1_table_summary <- all_n_data %>%
select(growing_season, Treatment, N_Type, mean, sd, n, se, ci_lower, ci_upper)
publish_table(
contrast_flux_summary,
caption   = "Cumulative N₂O Flux",
file_name = "tables/figure1n2o_table.pdf",
digits    = 2,
engine    = "xelatex",
scale_table = TRUE  # scales the table to fit the page width
)
# ==============================================================================
# Table Generation and Export as Publication-Ready PDFs
# ==============================================================================
# Define a function to generate and export a LaTeX table as a PDF.
# This function un-groups the data, replaces underscores in column names with spaces,
# and removes extra line spacing.
publish_table <- function(data, caption, file_name, digits = 2, engine = "xelatex") {
# Load required packages (if not already loaded)
if (!requireNamespace("dplyr", quietly = TRUE)) stop("Please install 'dplyr'")
if (!requireNamespace("stringr", quietly = TRUE)) stop("Please install 'stringr'")
if (!requireNamespace("knitr", quietly = TRUE)) stop("Please install 'knitr'")
if (!requireNamespace("kableExtra", quietly = TRUE)) stop("Please install 'kableExtra'")
if (!requireNamespace("tinytex", quietly = TRUE)) stop("Please install 'tinytex'")
library(dplyr)
library(stringr)
library(knitr)
library(kableExtra)
library(tinytex)
# Process the data: ungroup and replace underscores in column names with spaces.
table_processed <- data %>% ungroup()
colnames(table_processed) <- gsub("_", " ", colnames(table_processed))
# Create the LaTeX table using kable and kableExtra.
table_latex <- kable(
table_processed,
format   = "latex",
booktabs = TRUE,
caption  = caption,
digits   = digits,
escape   = FALSE
) %>%
kable_styling(latex_options = c("hold_position"), full_width = FALSE)
# Remove any extra addlinespace commands.
table_latex <- gsub("\\\\addlinespace", "", table_latex)
# Build a minimal LaTeX document.
if (engine == "xelatex") {
latex_doc <- paste0(
"\\documentclass{article}\n",
"\\usepackage{fontspec}\n",
"\\usepackage{graphicx}\n",
"\\usepackage{booktabs}\n",
"\\usepackage{geometry}\n",
"\\geometry{margin=1in}\n",
"\\begin{document}\n",
table_latex,
"\n\\end{document}"
)
} else {
latex_doc <- paste0(
"\\documentclass{article}\n",
"\\usepackage[utf8]{inputenc}\n",
"\\usepackage{graphicx}\n",
"\\usepackage{booktabs}\n",
"\\usepackage{geometry}\n",
"\\geometry{margin=1in}\n",
"\\begin{document}\n",
table_latex,
"\n\\end{document}"
)
}
# Write the LaTeX document to a temporary .tex file.
tex_file <- tempfile(fileext = ".tex")
writeLines(latex_doc, tex_file)
# Compile the .tex file to PDF using the specified engine.
if (engine == "xelatex") {
tinytex::xelatex(tex_file)
} else {
tinytex::pdflatex(tex_file)
}
# The generated PDF will have the same base name as the .tex file, but with a .pdf extension.
pdf_file <- sub("\\.tex$", ".pdf", tex_file)
# Create the target directory if needed and copy the PDF to file_name.
dir.create(dirname(file_name), showWarnings = FALSE, recursive = TRUE)
file.copy(pdf_file, file_name, overwrite = TRUE)
message("PDF table saved to: ", file_name)
}
publish_table(
contrast_flux_summary,
caption   = "Cumulative N₂O Flux",
file_name = "tables/figure1n2o_table.pdf",
digits    = 2,
engine    = "xelatex",
scale_table = TRUE  # scales the table to fit the page width
)
publish_table(
contrast_flux_summary,
caption   = "Cumulative N₂O Flux",
file_name = "tables/figure1n2o_table.pdf",
digits    = 2,
engine    = "xelatex"
)
publish_table(
contrast_flux_summary,
caption   = "Cumulative N₂O Flux",
file_name = "tables/figure1n2o_table.pdf",
digits    = 2,
engine    = "xelatex"
)
# ==============================================================================
# Table Generation and Export as Publication-Ready PDFs
# ==============================================================================
# Define a function to generate and export a LaTeX table as a PDF.
# This function un-groups the data, replaces underscores in column names with spaces,
# and removes extra line spacing.
publish_table <- function(data, caption, file_name, digits = 2, engine = "xelatex", landscape = FALSE) {
# Load required packages (if not already loaded)
if (!requireNamespace("dplyr", quietly = TRUE)) stop("Please install 'dplyr'")
if (!requireNamespace("stringr", quietly = TRUE)) stop("Please install 'stringr'")
if (!requireNamespace("knitr", quietly = TRUE)) stop("Please install 'knitr'")
if (!requireNamespace("kableExtra", quietly = TRUE)) stop("Please install 'kableExtra'")
if (!requireNamespace("tinytex", quietly = TRUE)) stop("Please install 'tinytex'")
library(dplyr)
library(stringr)
library(knitr)
library(kableExtra)
library(tinytex)
# Process the data: ungroup and replace underscores in column names with spaces.
table_processed <- data %>% ungroup()
colnames(table_processed) <- gsub("_", " ", colnames(table_processed))
# Create the LaTeX table using kable and kableExtra.
table_latex <- kable(
table_processed,
format   = "latex",
booktabs = TRUE,
caption  = caption,
digits   = digits,
escape   = FALSE
) %>%
kable_styling(latex_options = c("hold_position"), full_width = FALSE)
# Remove any extra \addlinespace commands.
table_latex <- gsub("\\\\addlinespace", "", table_latex)
# Optionally wrap in a landscape environment if needed.
if (landscape) {
table_latex <- paste0("\\begin{landscape}\n", table_latex, "\n\\end{landscape}")
}
# Build a minimal LaTeX document.
if (engine == "xelatex") {
latex_doc <- paste0(
"\\documentclass{article}\n",
"\\usepackage{fontspec}\n",
"\\usepackage{graphicx}\n",
"\\usepackage{booktabs}\n",
if (landscape) "\\usepackage{pdflscape}\n" else "",
"\\usepackage{geometry}\n",
"\\geometry{margin=1in}\n",
"\\begin{document}\n",
table_latex,
"\n\\end{document}"
)
} else {
latex_doc <- paste0(
"\\documentclass{article}\n",
"\\usepackage[utf8]{inputenc}\n",
"\\usepackage{graphicx}\n",
"\\usepackage{booktabs}\n",
if (landscape) "\\usepackage{pdflscape}\n" else "",
"\\usepackage{geometry}\n",
"\\geometry{margin=1in}\n",
"\\begin{document}\n",
table_latex,
"\n\\end{document}"
)
}
# Write the LaTeX document to a temporary .tex file.
tex_file <- tempfile(fileext = ".tex")
writeLines(latex_doc, tex_file)
# Compile the .tex file to PDF using the specified engine.
if (engine == "xelatex") {
tinytex::xelatex(tex_file)
} else {
tinytex::pdflatex(tex_file)
}
# The generated PDF file will have the same base name as the .tex file, but with a .pdf extension.
pdf_file <- sub("\\.tex$", ".pdf", tex_file)
# Create the target directory if needed and copy the PDF to file_name.
dir.create(dirname(file_name), showWarnings = FALSE, recursive = TRUE)
file.copy(pdf_file, file_name, overwrite = TRUE)
message("PDF table saved to: ", file_name)
}
publish_table(
contrast_flux_summary,
caption   = "Cumulative N₂O Flux",
file_name = "tables/figure1n2o_table.pdf",
digits    = 2,
engine    = "xelatex",
landscape = TRUE
)
View(final_sorghum)
View(drainage_summary)
# ------------------------------------------------------------------------------
# Mixed-Effects Model: Final Cumulative Drainage N as a Function of Treatment
# ------------------------------------------------------------------------------
drainage_summary_stats <- bind_rows(drainage_summary_23, drainage_summary_24) %>%
mutate(
cumulative_n_loss_kg_ha = (cumulative_n_loss_mg / 1e6) / 0.145,
N_Type = "Nitrogen Leaching",
Treatment = factor(treatment, levels = c("Corn", "Soy", "Sorghum", "Sorghum + Rye"))
) %>%
group_by(growing_season, Treatment, N_Type, plot) %>%
summarise(
mean = mean(cumulative_n_loss_kg_ha, na.rm = TRUE),
sd = sd(cumulative_n_loss_kg_ha, na.rm = TRUE),
n = n(),
se = sd / sqrt(n),
t_crit = qt(0.975, df = n - 1),
ci_lower = mean - t_crit * se,
ci_upper = mean + t_crit * se,
.groups = "drop"
)
View(drainage_summary_stats)
# ------------------------------------------------------------------------------
# Mixed-Effects Model: Final Cumulative Drainage N as a Function of Treatment
# ------------------------------------------------------------------------------
drainage_summary_stats <- bind_rows(drainage_summary_23, drainage_summary_24) %>%
mutate(
cumulative_n_loss_kg_ha = (cumulative_n_loss_mg / 1e6) / 0.145,
N_Type = "Nitrogen Leaching",
Treatment = factor(treatment, levels = c("Corn", "Soy", "Sorghum", "Sorghum + Rye"))
)
View(drainage_summary_stats)
# ------------------------------------------------------------------------------
# Mixed-Effects Model: Final Cumulative Drainage N as a Function of Treatment
# ------------------------------------------------------------------------------
drainage_summary_stats <- bind_rows(drainage_summary_23, drainage_summary_24) %>%
mutate(
cumulative_n_loss_kg_ha = (cumulative_n_loss_mg / 1e6) / 0.145,
N_Type = "Nitrogen Leaching",
Treatment = factor(treatment, levels = c("Corn", "Soy", "Sorghum", "Sorghum + Rye"))
)
library(lme4)
model_drainage <- lmer(cumulative_n_loss_kg_ha ~ Treatment * factor(growing_season) + (1 | plot), data = drainage_summary_stats)
summary(model_drainage)
# ------------------------------------------------------------------------------
# Pairwise Comparisons Using emmeans
# ------------------------------------------------------------------------------
library(emmeans)
emm_drainage <- emmeans(model_drainage, ~ Treatment | factor(growing_season))
contrast_drainage <- pairs(emm_drainage)
# For a neat summary table, we can use broom.mixed to tidy the output:
library(broom.mixed)
contrast_drainage_summary <- tidy(contrast_drainage)
print(contrast_drainage_summary)
# ------------------------------------------------------------------------------
# Generate a Publication-Ready Table of the Pairwise Comparisons
# ------------------------------------------------------------------------------
kable(contrast_drainage_summary, digits = 2,
caption = "Cumulative N₂O drainage")
publish_table(
contrast_drainage_summary,
caption   = "Cumulative inorganic N drainage",
file_name = "tables/figure1drainage_table.pdf",
digits    = 2,
engine    = "xelatex",
landscape = TRUE
)
View(drainage_summary_stats)
contrast_drainage
# Extract the estimated marginal means as a data frame.
emm_df <- as.data.frame(emm_drainage)
# Rename the growing_season column if necessary:
names(emm_df)[names(emm_df) == "factor(growing_season)"] <- "growing_season"
# Now, augment your tidy contrast table with the individual group means.
library(dplyr)
library(tidyr)
contrast_drainage_summary <- tidy(contrast_drainage) %>%
rowwise() %>%
mutate(
# Split the contrast string (e.g., "Corn - Soy") into two groups.
group1 = strsplit(contrast, " - ")[[1]][1],
group2 = strsplit(contrast, " - ")[[1]][2],
# Retrieve the estimated marginal mean for each group, matching by growing_season.
mean1 = emm_df$emmean[emm_df$treatment == group1 & emm_df$growing_season == growing_season],
mean2 = emm_df$emmean[emm_df$treatment == group2 & emm_df$growing_season == growing_season],
# Compute the difference between the means.
mean_difference = mean1 - mean2
) %>%
ungroup()
# Print the augmented table.
kable(contrast_drainage_summary, digits = 2,
caption = "Cumulative Inorganic N Drainage: Pairwise Comparisons with Group Means")
View(drainage_summary_stats)
########
# Create drainage summary stats (if not already done)
drainage_summary_stats <- bind_rows(drainage_summary_23, drainage_summary_24) %>%
mutate(
cumulative_n_loss_kg_ha = (cumulative_n_loss_mg / 1e6) / 0.145,
N_Type = "Nitrogen Leaching",
Treatment = factor(treatment, levels = c("Corn", "Soy", "Sorghum", "Sorghum + Rye"))
)
# Fit the mixed-effects model (using plot as random effect)
model_drainage <- lmer(cumulative_n_loss_kg_ha ~ Treatment * factor(growing_season) + (1 | plot),
data = drainage_summary_stats)
summary(model_drainage)
# Obtain estimated marginal means, conditioning on growing_season as a factor
library(emmeans)
emm_drainage <- emmeans(model_drainage, ~ Treatment | factor(growing_season))
# Compute pairwise contrasts for Treatment within each growing season
contrast_drainage <- pairs(emm_drainage)
library(broom.mixed)
library(dplyr)
library(stringr)
library(knitr)
# Convert the emmeans object to a data frame.
emm_drainage_df <- as.data.frame(emm_drainage)
# Rename the growing season column for easier matching
names(emm_drainage_df)[names(emm_drainage_df) == "factor(growing_season)"] <- "growing_season"
# Tidy the contrast table
contrast_drainage_summary <- tidy(contrast_drainage)
# Augment the contrast table with the estimated means for each group.
# Here we assume the contrast string is of the form "Group1 - Group2"
contrast_drainage_summary_aug <- contrast_drainage_summary %>%
rowwise() %>%
mutate(
group1 = str_split(contrast, " - ", simplify = TRUE)[1],
group2 = str_split(contrast, " - ", simplify = TRUE)[2],
# Ensure growing_season is a character for matching
growing_season = as.character(growing_season),
mean1 = emm_drainage_df$emmean[emm_drainage_df$treatment == group1 &
as.character(emm_drainage_df$growing_season) == growing_season],
mean2 = emm_drainage_df$emmean[emm_drainage_df$treatment == group2 &
as.character(emm_drainage_df$growing_season) == growing_season],
mean_difference = mean1 - mean2
) %>%
ungroup()
# Display the augmented contrast table
kable(contrast_drainage_summary_aug, digits = 2,
caption = "Cumulative Inorganic N Drainage: Pairwise Comparisons with Group Means")
# Augment the contrast table with the estimated means for each group.
# Here we assume the contrast string is of the form "Group1 - Group2"
contrast_drainage_summary_aug <- contrast_drainage_summary %>%
rowwise() %>%
mutate(
group1 = str_split(contrast, " - ", simplify = TRUE)[1],
group2 = str_split(contrast, " - ", simplify = TRUE)[2],
# Ensure growing_season is a character for matching
growing_season = as.character(growing_season),
mean1 = emm_drainage_df$emmean[emm_drainage_df$treatment == group1 &
as.character(emm_drainage_df$growing_season) == growing_season],
mean2 = emm_drainage_df$emmean[emm_drainage_df$treatment == group2 &
as.character(emm_drainage_df$growing_season) == growing_season],
mean_difference = mean1 - mean2
) %>%
ungroup()
contrast_drainage_summary
emm_drainage_df
model_drainage <- lm(cumulative_n_loss_kg_ha ~ Treatment * factor(growing_season), data = drainage_summary_stats)
summary(model_drainage)
# ------------------------------------------------------------------------------
# Pairwise Comparisons Using emmeans
# ------------------------------------------------------------------------------
library(emmeans)
emm_drainage <- emmeans(model_drainage, ~ Treatment | factor(growing_season))
contrast_drainage <- pairs(emm_drainage)
# For a neat summary table, we can use broom.mixed to tidy the output:
library(broom.mixed)
contrast_drainage_summary <- tidy(contrast_drainage)
print(contrast_drainage_summary)
# ------------------------------------------------------------------------------
# Generate a Publication-Ready Table of the Pairwise Comparisons
# ------------------------------------------------------------------------------
kable(contrast_drainage_summary, digits = 2,
caption = "Cumulative inorganic N drainage")
drainage_summary_stats <- bind_rows(drainage_summary_23, drainage_summary_24) %>%
mutate(
cumulative_n_loss_kg_ha = (cumulative_n_loss_mg / 1e6) / 0.145,
N_Type = "Nitrogen Leaching",
Treatment = factor(treatment, levels = c("Corn", "Soy", "Sorghum", "Sorghum + Rye"))
)
# ------------------------------------------------------------------------------
# Fit an ANOVA model (two-way: Treatment and Growing Season)
# ------------------------------------------------------------------------------
model_drainage_aov <- aov(cumulative_n_loss_kg_ha ~ Treatment * factor(growing_season),
data = drainage_summary_stats)
# Display the ANOVA table:
anova_table <- summary(model_drainage_aov)
kable(anova_table[[1]], digits = 2,
caption = "ANOVA Table for Cumulative Inorganic N Drainage")
# ------------------------------------------------------------------------------
# Post-hoc Comparisons Using Tukey's HSD Test
# ------------------------------------------------------------------------------
# Tukey's HSD test on the Treatment factor:
tukey_results <- TukeyHSD(model_drainage_aov, "Treatment")
# Convert the Tukey output to a data frame:
tukey_df <- as.data.frame(tukey_results$Treatment)
tukey_df$Comparison <- rownames(tukey_df)
kable(tukey_df, digits = 2,
caption = "Tukey HSD Pairwise Comparisons for Treatment (Cumulative Inorganic N Drainage)")
# ------------------------------------------------------------------------------
# Option: Pairwise t-tests for each Growing Season (if you want to see season-specific comparisons)
# ------------------------------------------------------------------------------
t_test_2023 <- pairwise.t.test(
drainage_summary_stats$cumulative_n_loss_kg_ha[drainage_summary_stats$growing_season == 2023],
drainage_summary_stats$Treatment[drainage_summary_stats$growing_season == 2023],
p.adjust.method = "holm"
)
t_test_2024 <- pairwise.t.test(
drainage_summary_stats$cumulative_n_loss_kg_ha[drainage_summary_stats$growing_season == 2024],
drainage_summary_stats$Treatment[drainage_summary_stats$growing_season == 2024],
p.adjust.method = "holm"
)
# Print pairwise t-test results:
print(t_test_2023)
print(t_test_2024)
drainage_summary_stats$cumulative_n_loss_kg_ha[drainage_summary_stats$growing_season == 2023]
