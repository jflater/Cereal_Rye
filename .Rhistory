theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = n_loss_2023, aes(x = date)) +
# Points for measured nitrate (only on rows where sample_y_n equals "Y")
geom_point(data = n_loss_2023 %>% dplyr::filter(.data$sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
# Points for measured ammonia
geom_point(data = n_loss_2023 %>% dplyr::filter(.data$sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
# Line for interpolated nitrate
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
# Line for interpolated ammonia (using a dashed line)
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"), size = 1, linetype = "dashed") +
# Facet by plot
facet_wrap(~ plot, scales = "free_y") +
labs(x = "Date",
y = "Value (Flow or Concentration)",
title = "Daily Flow and Nutrient Concentrations by Plot",
color = "Legend") +
theme_bw() +
theme(legend.position = "bottom")
View(df_interpolated)
ggplot(n_loss_2023, aes(x = date, y = flow_l)) +
geom_col(fill = "skyblue", color = "black", alpha = 0.7) +
facet_wrap(~ plot) +
labs(x = "Date",
y = "Flow (L)",
title = "Daily Flow by Plot") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
glimpse(n_loss_2023)
flow_plot <- ggplot(n_loss_2023, aes(x = date, y = flow_l)) +
geom_col(fill = "skyblue", color = "black", alpha = 0.7) +
facet_wrap(~ plot, scales = "free_y") +
labs(x = NULL,  # Remove x-axis label since it will be shared
y = "Flow (L)",
title = "Daily Flow") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
sample_plot <- ggplot(n_loss_2023 %>% filter(sample_y_n == "Y"), aes(x = date)) +
geom_point(aes(y = 0), color = "darkred", size = 2) +
facet_wrap(~ plot, scales = "free_y") +
labs(x = NULL,
y = "",
title = "Sampling Events") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
sample_plot <- ggplot(n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"), aes(x = date)) +
geom_point(aes(y = 0), color = "darkred", size = 2) +
facet_wrap(~ plot, scales = "free_y") +
labs(x = NULL,
y = "",
title = "Sampling Events") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
conc_plot <- ggplot(n_loss_2023, aes(x = date)) +
# Measured concentrations (points) – note: adjust for nitrate and ammonia separately.
geom_point(data = n_loss_2023 %>% filter(sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
geom_point(data = n_loss_2023 %>% filter(sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
# Interpolated concentrations (lines)
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"), size = 1, linetype = "dashed") +
facet_wrap(~ plot, scales = "free_y") +
labs(x = "Date",
y = "Concentration",
title = "Nutrient Concentrations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
conc_plot <- ggplot(n_loss_2023, aes(x = date)) +
# Measured concentrations (points) – note: adjust for nitrate and ammonia separately.
geom_point(data = n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
geom_point(data = n_loss_2023 %>% filter(sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
# Interpolated concentrations (lines)
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"), size = 1, linetype = "dashed") +
facet_wrap(~ plot, scales = "free_y") +
labs(x = "Date",
y = "Concentration",
title = "Nutrient Concentrations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
conc_plot <- ggplot(n_loss_2023, aes(x = date)) +
# Measured concentrations (points) – note: adjust for nitrate and ammonia separately.
geom_point(data = n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
geom_point(data = n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
# Interpolated concentrations (lines)
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"), size = 1, linetype = "dashed") +
facet_wrap(~ plot, scales = "free_y") +
labs(x = "Date",
y = "Concentration",
title = "Nutrient Concentrations") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(cowplot)
combined_plot <- plot_grid(
flow_plot,
sample_plot,
conc_plot,
ncol = 1,
align = "v",
rel_heights = c(1, 0.3, 1)  # adjust relative heights as needed
)
# Display the combined plot
print(combined_plot)
flow_plot <- ggplot(n_loss_2023, aes(x = date, y = flow_l)) +
geom_col(fill = "skyblue", color = "black", alpha = 0.7) +
facet_wrap(~ plot, scales = "free_y") +
labs(x = NULL,  # Remove x-axis label since it will be shared
y = "Flow (L)",
title = "Daily Flow") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
sample_plot <- ggplot(n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"), aes(x = date)) +
geom_point(aes(y = 0), color = "darkred", size = 2) +
facet_wrap(~ plot, scales = "free_y") +
labs(x = NULL,
y = "",
title = "Sampling Events") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
conc_plot <- ggplot(n_loss_2023, aes(x = date)) +
# Interpolated concentrations
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"),
size = 1, linetype = "dashed") +
# Measured concentrations
geom_point(data = n_loss_2023 %>% filter(sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
geom_point(data = n_loss_2023 %>% filter(sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
# Vertical lines for sample events
geom_vline(data = n_loss_2023 %>% filter(sample_y_n == "Y"),
aes(xintercept = as.numeric(date)),
color = "red", linetype = "dotted", alpha = 0.5) +
facet_wrap(~ plot, scales = "free_y") +
labs(x = "Date", y = "Concentration",
title = "Nutrient Concentrations with Sampling Events",
color = "Legend") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
conc_plot <- ggplot(n_loss_2023, aes(x = date)) +
# Interpolated concentrations
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"),
size = 1, linetype = "dashed") +
# Measured concentrations
geom_point(data = n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
geom_point(data = n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
# Vertical lines for sample events
geom_vline(data = n_loss_2023 %>% dplyr::filter(sample_y_n == "Y"),
aes(xintercept = as.numeric(date)),
color = "red", linetype = "dotted", alpha = 0.5) +
facet_wrap(~ plot, scales = "free_y") +
labs(x = "Date", y = "Concentration",
title = "Nutrient Concentrations with Sampling Events",
color = "Legend") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(cowplot)
combined_plot <- plot_grid(
flow_plot,
conc_plot,
ncol = 1,
align = "v",
rel_heights = c(1, 0.3, 1)  # adjust relative heights as needed
)
# Display the combined plot
print(combined_plot)
library(plotly)
install.packages("plotly")
library(plotly)
# Define UI for app
ui <- fluidPage(
titlePanel("Interactive Plot Selector"),
sidebarLayout(
sidebarPanel(
selectInput("plot_select", "Select Plot:",
choices = sort(unique(n_loss_2023$plot)))
),
mainPanel(
plotlyOutput("combinedPlot")
)
)
)
library(shiny)
library(plotly)
library(shiny)
# Define UI for app
ui <- fluidPage(
titlePanel("Interactive Plot Selector"),
sidebarLayout(
sidebarPanel(
selectInput("plot_select", "Select Plot:",
choices = sort(unique(n_loss_2023$plot)))
),
mainPanel(
plotlyOutput("combinedPlot")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive data filtered by selected plot
filtered_data <- reactive({
n_loss_2023 %>% filter(plot == input$plot_select)
})
output$combinedPlot <- renderPlotly({
# Flow plot
flow_plot <- ggplot(filtered_data(), aes(x = date, y = flow_l)) +
geom_col(fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = NULL,
y = "Flow (L)",
title = "Daily Flow") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Concentration plot with sample events overlayed
conc_plot <- ggplot(filtered_data(), aes(x = date)) +
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"),
size = 1, linetype = "dashed") +
geom_point(data = filtered_data() %>% dplyr::filter(sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
geom_point(data = filtered_data() %>% dplyr::filter(sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
geom_vline(data = filtered_data() %>% dplyr::filter(sample_y_n == "Y"),
aes(xintercept = as.numeric(date)),
color = "red", linetype = "dotted", alpha = 0.5) +
labs(x = "Date", y = "Concentration",
title = "Nutrient Concentrations with Sampling Events",
color = "Legend") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Combine the two plots vertically
combined_plot <- plot_grid(flow_plot, conc_plot, ncol = 1, align = "v", rel_heights = c(1, 1))
# Convert to an interactive Plotly object
ggplotly(combined_plot)
})
}
# Run the application
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Interactive Plot Selector"),
sidebarLayout(
sidebarPanel(
selectInput("plot_select", "Select Plot:",
choices = sort(unique(n_loss_2023$plot)))
),
mainPanel(
plotlyOutput("combinedPlot")
)
)
)
server <- function(input, output, session) {
output$combinedPlot <- renderPlotly({
# Filter data for the selected plot
filtered_data <- n_loss_2023 %>% filter(plot == input$plot_select)
# Create flow plot
flow_plot <- ggplot(filtered_data, aes(x = date, y = flow_l)) +
geom_col(fill = "skyblue", color = "black", alpha = 0.7) +
labs(x = NULL,
y = "Flow (L)",
title = "Daily Flow") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
# Create concentration plot with sampling events overlay
conc_plot <- ggplot(filtered_data, aes(x = date)) +
geom_line(aes(y = approx_nitrate_mg_l, color = "Interpolated Nitrate"), size = 1) +
geom_line(aes(y = approx_ammonia_mg_l, color = "Interpolated Ammonia"),
size = 1, linetype = "dashed") +
geom_point(data = filtered_data %>% dplyr::filter(sample_y_n == "Y"),
aes(y = nitrate_mg_ml, color = "Measured Nitrate"),
shape = 16, size = 2) +
geom_point(data = filtered_data %>% dplyr::filter(sample_y_n == "Y"),
aes(y = ammonia_mg_l, color = "Measured Ammonia"),
shape = 17, size = 2) +
geom_vline(data = filtered_data %>% dplyr::filter(sample_y_n == "Y"),
aes(xintercept = as.numeric(date)),
color = "red", linetype = "dotted", alpha = 0.5) +
labs(x = "Date", y = "Concentration",
title = "Nutrient Concentrations with Sampling Events",
color = "Legend") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert each ggplot object to an interactive Plotly object
flow_plotly <- ggplotly(flow_plot)
conc_plotly <- ggplotly(conc_plot)
# Combine using subplot, sharing the x-axis
subplot(flow_plotly, conc_plotly, nrows = 2, shareX = TRUE, titleY = TRUE)
})
}
shinyApp(ui, server)
View(df_interpolated)
library(readxl)
library(janitor)
library(lubridate)
library(tidyverse)
# From my PC:
#raw_X2024_SABR_MASTER_water <- read_excel("C:/Users/jflater/Box/McDaniel Lab 2.0/Projects/SABR_TileWater_Studt/2024/2024_SABR_MASTER_water.xlsm")
#raw_SABR_tile_MASTER_pre2024 <- read_excel("C:/Users/jflater/Box/McDaniel Lab 2.0/Projects/SABR_TileWater_Studt/2019-2023/SABR_tile_MASTER_pre2024.xlsx")
# From my Mac:
# SABR_tile_MASTER_pre2024 <- read_excel("../../Box-Box/McDaniel Lab 2.0/Projects/SABR_TileWater_Studt/2019-2023/SABR_tile_MASTER_pre2024.xlsx")
# X2024_SABR_MASTER_water <- read_excel("../../Box-Box/McDaniel Lab 2.0/Projects/SABR_TileWater_Studt/2024/2024_SABR_MASTER_water.xlsm")
#
# colnames(X2024_SABR_MASTER_water)
#
# colnames(SABR_tile_MASTER_pre2024)
#
# # save both as .csv in data/raw
#
# write_csv(X2024_SABR_MASTER_water, "data/raw/X2024_SABR_MASTER_water.csv")
# write_csv(SABR_tile_MASTER_pre2024, "data/raw/SABR_tile_MASTER_pre2024.csv")
SABR_tile_MASTER_pre2024 <- read_csv("data/raw/SABR_tile_MASTER_pre2024.csv")
X2024_SABR_MASTER_water <- read_csv("data/raw/X2024_SABR_MASTER_water.csv")
# 2023 data
df_2023 <- SABR_tile_MASTER_pre2024 %>%
mutate(date = as.Date(date, format = "%Y%m%d")) %>%
select(sample_id, date, plot, nitrate_ppm = no3_mg_l, ammonia_ppm = nh4_mg_l)
# 2024 data
df_2024 <- X2024_SABR_MASTER_water %>%
separate(lab_id, into = c("date", "plot"), sep = "_", remove = FALSE) %>%
mutate(date = as.Date(date, format = "%Y%m%d")) %>%
select(date, plot, nitrate_ppm, ammonia_ppm)
# Combine 2023 and 2024 data
df <- bind_rows(df_2023, df_2024)
nrow(df_2023) + nrow(df_2024) == nrow(df)
# Many NAs in 2023 data, we are missing the plot and date, but we have sample_id
# Check this file for date and plot
read_xlsx("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2023.xlsx") %>%
anyNA()
studt_2023 <- read_xlsx("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2023.xlsx") %>%
clean_names() %>%
mutate(date = as.Date(as.character(date), format = "%Y%m%d"),
sample_id = as.double(sample_id))
glimpse(studt_2023)
glimpse(df_2023)
# join studt_2023 to df by date and plot, keep all rows
temp <- df_2023 %>%
left_join(studt_2023, by = c("sample_id"))
water_n_2023 <- temp %>%
dplyr::filter(year(date.y) == 2023 & !plot.y %in% c("NE", "SE", "SW", "NW")) %>%
select(plot = plot.y, date = date.y, nitrate_mg_ml = nitrate_ppm, ammonia_mg_l = ammonia_ppm, sample_y_n)
write_csv(water_n_2023, "data/clean/water_n_2023.csv")
# 2024 data
studt_2024 <- read_xls("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xls") %>%
clean_names()
# 2024 data
studt_2024 <- read_xls("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xls") %>%
clean_names()
# 2024 data
studt_2024 <- read_xls("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xlsx") %>%
clean_names()
# 2024 data
studt_2024 <- read_xls("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xlsx") %>%
clean_names()
library(readxl)
TileDrainage_2024 <- read_excel("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xlsx")
View(TileDrainage_2024)
# 2024 data
studt_2024 <- read_xlsx("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xlsx") %>%
clean_names()
View(studt_2024)
colnames(studt_2024)
# 2024 data
studt_2024 <- read_xlsx("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xlsx") %>%
clean_names() %>%
mutate(date = as.Date(as.character(date), format = "%Y%m%d"),
sample_id = as.double(sample_id))
View(studt_2024)
View(df_2024)
View(df_2024)
# 2024 data
df_2024 <- X2024_SABR_MASTER_water %>%
separate(lab_id, into = c("date", "plot"), sep = "_", remove = FALSE) %>%
mutate(date = as.Date(date, format = "%Y%m%d")) %>%
select(sample_number, date, plot, nitrate_ppm, ammonia_ppm)
View(studt_2024)
compare_df_cols(studt_2024, df_2024)
# 2024 data
df_2024 <- X2024_SABR_MASTER_water %>%
separate(lab_id, into = c("date", "plot"), sep = "_", remove = FALSE) %>%
mutate(date = as.Date(date, format = "%Y%m%d")) %>%
select(sample_id = sample_number, date, plot, nitrate_ppm, ammonia_ppm)
# 2024 data
df_2024 <- X2024_SABR_MASTER_water %>%
separate(lab_id, into = c("date", "plot"), sep = "_", remove = FALSE) %>%
mutate(date = as.Date(date, format = "%Y%m%d")) %>%
select(sample_id = sample_number, everything())
# 2024 data
df_2024 <- X2024_SABR_MASTER_water %>%
separate(lab_id, into = c("date", "plot"), sep = "_", remove = FALSE) %>%
mutate(date = as.Date(date, format = "%Y%m%d"),
sample_number = as.integer(sample_number)) %>%
select(sample_id = sample_number, everything())
compare_df_cols(studt_2024, df_2024)
# 2024 data
studt_2024 <- read_xlsx("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xlsx") %>%
clean_names() %>%
mutate(date = as.Date(as.character(date), format = "%Y%m%d"),
sample_id = as.interger(sample_id))
# 2024 data
studt_2024 <- read_xlsx("C:/Users/jflater/Box/CABBI/Data/MeasuredData/SABR/SmallDrainagePlots/Drainage/meter data/TileDrainage_2024.xlsx") %>%
clean_names() %>%
mutate(date = as.Date(as.character(date), format = "%Y%m%d"),
sample_id = as.integer(sample_id))
# join studt_2024 to df_2024 by sample_id, keep all rows
temp_2024 <- df_2024 %>%
left_join(studt_2024, by = c("sample_id"))
View(temp_2024)
# join studt_2024 to df_2024 by sample_id, keep all rows
temp_2024 <- df_2024 %>%
dplyr::filter(!plot %in% c("NE", "SE", "SW", "NW")) %>%
left_join(studt_2024, by = c("sample_id"))
View(temp_2024)
# join studt_2024 to df_2024 by sample_id, keep all rows
temp_2024 <- df_2024 %>%
dplyr::filter(!plot %in% c("NE", "SE", "SW", "NW")) %>%
select(-matches("^\\.\\.[0-9]+$")) %>%
left_join(studt_2024, by = c("sample_id"))
View(temp_2024)
View(df_2024)
View(studt_2024)
# join studt_2024 to df_2024 by sample_id, keep all rows
temp_2024 <- df_2024 %>%
dplyr::filter(!plot %in% c("NE", "SE", "SW", "NW")) %>%
select(-matches("^\\.\\.[0-9]+$")) %>%
left_join(studt_2024, by = c("sample_id"))
# join studt_2024 to df_2024 by sample_id, keep all rows
temp_2024 <- df_2024 %>%
dplyr::filter(!plot %in% c("NE", "SE", "SW", "NW")) %>%
select(-matches("^\\.\\.\\.[0-9]+$")) %>%
left_join(studt_2024, by = c("sample_id"))
# Do all rows have values in nitrate_ppm and ammonia_ppm?
anyNA(temp_2024$nitrate_ppm) # FALSE
anyNA(temp_2024$ammonia_ppm) # FALSE
# What row?
temp_2024 %>%
dplyr::filter(is.na(nitrate_ppm) | is.na(ammonia_ppm))
# According to comments ok to remove, remove that row
temp_2024 <- temp_2024 %>%
dplyr::filter(!is.na(nitrate_ppm) & !is.na(ammonia_ppm))
# Any rows with N in sample_y_n?
temp_2024 %>%
dplyr::filter(sample_y_n == "N")
# Any rows with N in sample_y_n?
temp_2024 <- temp_2024  %>%
dplyr::filter(sample_y_n == "N") %>%
mutate(plot.y = case_when(
sample_y_n == "N" & plot.y == "4" ~ "09",
TRUE ~ plot.y
))
# join studt_2024 to df_2024 by sample_id, keep all rows
temp_2024 <- df_2024 %>%
dplyr::filter(!plot %in% c("NE", "SE", "SW", "NW")) %>%
select(-matches("^\\.\\.\\.[0-9]+$")) %>%
left_join(studt_2024, by = c("sample_id"))
# Do all rows have values in nitrate_ppm and ammonia_ppm?
anyNA(temp_2024$nitrate_ppm) # FALSE
anyNA(temp_2024$ammonia_ppm) # FALSE
# What row?
temp_2024 %>%
dplyr::filter(is.na(nitrate_ppm) | is.na(ammonia_ppm))
# According to comments ok to remove, remove that row
temp_2024 <- temp_2024 %>%
dplyr::filter(!is.na(nitrate_ppm) & !is.na(ammonia_ppm))
# Any rows with N in sample_y_n?
temp_2024 <- temp_2024  %>%
mutate(plot.y = case_when(
sample_y_n == "N" & plot.y == "4" ~ "09",
TRUE ~ plot.y
))
water_n_2024 <- temp_2024 %>%
select(plot = plot.y, date = date.y, nitrate_ppm, ammonia_ppm)
View(water_n_2024)
# Save
write_csv(water_n_2024, "data/clean/water_n_2024.csv")
gc()
gc()
