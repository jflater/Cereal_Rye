p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
# 5) Prepare data for stat_pvalue_manual (optional, if you want to add p-values onto a plot)
pairwise_pvals <- as.data.frame(as.table(pairwise_result$p.value))
colnames(pairwise_pvals) <- c("group1", "group2", "p_value")
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment", palette = "jco",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
title = "Flow by Treatment and Plot",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
# Display in a nice table
kable(pairwise_result$p.value, format = "html") %>%
kable_styling(full_width = FALSE)
# Option B: Use scientific notation with 2 significant digits
pairwise_pvals$p_value <- formatC(
pairwise_pvals$p_value,
format = "e",     # scientific notation
digits = 2        # number of digits
)
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment", palette = "jco",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
title = "Flow by Treatment and Plot",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
View(p_values)
# Load required packages
library(car)         # For leveneTest()
library(ggpubr)      # For stat_compare_means()
library(kableExtra)  # For neat HTML tables
# 1) Check normality (Shapiro-Wilk)
model <- aov(flow ~ treatment, data = filtered_data)
shapiro.test(residuals(model))  # If p < 0.05, data deviate from normality
# 2) Check homogeneity of variance (Levene's test)
leveneTest(flow ~ treatment, data = filtered_data)
# If p < 0.05, variances are not equal
# 3) Kruskal-Wallis test (non-parametric alternative to ANOVA)
kruskal_result <- kruskal.test(flow ~ treatment, data = filtered_data)
print(kruskal_result)
# 4) Post-hoc pairwise comparisons (Wilcoxon) with multiple-testing correction
pairwise_result <- pairwise.wilcox.test(
x = filtered_data$flow,
g = filtered_data$treatment,
p.adjust.method = "BH"
)
# Display in a nice table
kable(pairwise_result$p.value, format = "html") %>%
kable_styling(full_width = FALSE)
# 5) Prepare data for stat_pvalue_manual (optional, if you want to add p-values onto a plot)
pairwise_pvals <- as.data.frame(as.table(pairwise_result$p.value))
colnames(pairwise_pvals) <- c("group1", "group2", "p_value")
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment", palette = "jco",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
title = "Flow by Treatment and Plot",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment", palette = "jco",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
legend.title = "Treatment",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
?ggboxplot
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment", palette = "Frontiers",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
legend.title = "Treatment",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment", palette = "frontiers",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
legend.title = "Treatment",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment", palette = "jco",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
legend.title = "Treatment",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
library(ggsci)
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
legend.title = "Treatment",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
)
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
) +
scale_color_frontier()  # Use ggsci color palette
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
) +
scale_color_frontiers()
?pairwise.wilcox.test
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_format",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
) +
scale_color_frontiers()
?stat_pvalue_manual
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p.adj",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
) +
scale_color_frontiers()
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
) +
scale_color_frontiers()
# ----------------------------------------
# Load Packages
# ----------------------------------------
library(dplyr)         # For piping, data manipulation
library(rstatix)       # For kruskal_test, pairwise_wilcox_test, etc.
library(ggpubr)        # For ggboxplot and stat_pvalue_manual
library(cowplot)       # For combining plots
library(kableExtra)    # Optional, if you want nice kable tables
# ----------------------------------------
# Example Data
# ----------------------------------------
# Suppose you have a data frame called filtered_data with columns:
#   "treatment" (factor)
#   "flow" (numeric)
# filtered_data <- ...
# ----------------------------------------
# 1) Check Normality & Homogeneity
# ----------------------------------------
# Normality (Shapiro-Wilk on overall or group-by-group)
shapiro_test_results <- filtered_data %>%
shapiro_test(flow)
# If you prefer to test each group separately, you can do:
# filtered_data %>%
#   group_by(treatment) %>%
#   shapiro_test(flow)
# Levene’s test
levene_test_results <- filtered_data %>%
levene_test(flow ~ treatment)
# ----------------------------------------
# 2) Kruskal-Wallis Test
# ----------------------------------------
res_kw <- filtered_data %>%
kruskal_test(flow ~ treatment)
res_kw
# ----------------------------------------
# 3) Pairwise Wilcoxon (with BH correction)
# ----------------------------------------
res_pw <- filtered_data %>%
pairwise_wilcox_test(flow ~ treatment, p.adjust.method = "BH")
# Add columns for “stars” (***** vs. ns) and a formatted p-value
res_pw <- res_pw %>%
mutate(
stars      = ifelse(p.adj < 0.05, "*****", "ns"),
p_value_sc = formatC(p.adj, format = "e", digits = 2)  # scientific notation
)
# ----------------------------------------
# 4) Make a Boxplot
# ----------------------------------------
p_box <- ggboxplot(
filtered_data,
x = "treatment",
y = "flow",
add = "jitter"
)
# ----------------------------------------
# 5) Annotate the Boxplot with Overall KW p-value & Pairwise p-values
# ----------------------------------------
# A) Plot the overall Kruskal-Wallis p-value
p_annotated <- p_box +
stat_compare_means(
method   = "kruskal.test",
label.x  = 1.5,
label.y  = 1.15 * max(filtered_data$flow),
label    = "p.format"  # e.g., "p = 0.0123"
)
# B) Add pairwise comparison significance using stat_pvalue_manual
# rstatix outputs comparisons as group1, group2. We can directly use that.
# We only need to specify the y.position for each comparison. rstatix can help:
res_pw <- res_pw %>%
add_xy_position(x = "treatment")  # calculates “y.position” automatically
# Because we use a custom "stars" label, we specify label = "stars"
p_annotated <- p_annotated +
stat_pvalue_manual(
data   = res_pw,
label  = "stars",   # "*****" or "ns"
tip.length = 0.01   # aesthetic tweak
)
# ----------------------------------------
# 6) Create a Small Table of p-values
# ----------------------------------------
# For demonstration, we can convert res_pw into a table using ggpubr or kable
table_html <- res_pw %>%
select(group1, group2, p.adj, stars, p_value_sc) %>%
rename("adjusted p" = p.adj,
"sci. p"     = p_value_sc) %>%
kbl(format = "html") %>%
kable_styling(full_width = FALSE)
# Alternatively, convert to a ggtexttable or tableGrob for cowplot
p_table <- ggparagraph(text = table_html, size = 10)
# Or use ggtexttable from ggpubr:
# p_table <- ggtexttable(res_pw, rows = NULL, theme = ttheme("mOrange"))
# ----------------------------------------
# 7) Combine the Boxplot + Table in One Figure
# ----------------------------------------
final_plot <- plot_grid(
p_annotated,
p_table,
ncol = 1,
rel_heights = c(0.7, 0.3)
)
print(final_plot)
#########
# Load required packages
library(car)         # For leveneTest()
library(ggpubr)      # For stat_compare_means()
library(kableExtra)  # For neat HTML tables
library(ggsci)
# 1) Check normality (Shapiro-Wilk)
model <- aov(flow ~ treatment, data = filtered_data)
shapiro.test(residuals(model))  # If p < 0.05, data deviate from normality
# 2) Check homogeneity of variance (Levene's test)
leveneTest(flow ~ treatment, data = filtered_data)
# If p < 0.05, variances are not equal
# 3) Kruskal-Wallis test (non-parametric alternative to ANOVA)
kruskal_result <- kruskal.test(flow ~ treatment, data = filtered_data)
print(kruskal_result)
# 4) Post-hoc pairwise comparisons (Wilcoxon) with multiple-testing correction
pairwise_result <- pairwise.wilcox.test(
x = filtered_data$flow,
g = filtered_data$treatment,
p.adjust.method = "BH",
)
# Display in a nice table
kable(pairwise_result$p.value, format = "html") %>%
kable_styling(full_width = FALSE)
# 5) Prepare data for stat_pvalue_manual (optional, if you want to add p-values onto a plot)
pairwise_pvals <- as.data.frame(as.table(pairwise_result$p.value))
colnames(pairwise_pvals) <- c("group1", "group2", "p_value")
# 6) Visualize with boxplots and add p-values
p_box <- ggboxplot(filtered_data, x = "treatment", y = "flow",
color = "treatment",
add = "jitter",
xlab = "Treatment", ylab = "Flow",
legend.title = "Treatment",
ggtheme = theme_minimal())
p_box +
stat_compare_means(
method = "kruskal.test",
label = "p.format",
label.x = 1.5,  # Adjust horizontally as needed
label.y = 1.1 * max(filtered_data$flow)
) +
stat_pvalue_manual(
pairwise_pvals,
label = "p_value",
y.position = seq(
from = 1.05 * max(filtered_data$flow),
by   = 0.05 * max(filtered_data$flow),
length.out = nrow(pairwise_pvals)   # Ensure length matches number of comparisons
),
step.increase = 0.1
) +
scale_color_frontiers()
library(readxl)
X2024_SABR_MASTER_water <- read_excel("C:/Users/jflater/Box/McDaniel Lab 2.0/Projects/SABR_TileWater_Studt/2024/2024_SABR_MASTER_water.xlsm")
SABR_tile_MASTER_pre2024 <- read_excel("../../Box-Box/McDaniel Lab 2.0/Projects/SABR_TileWater_Studt/2019-2023/SABR_tile_MASTER_pre2024.xlsx")
# X2024_SABR_MASTER_water <- read_excel("../../Box-Box/McDaniel Lab 2.0/Projects/SABR_TileWater_Studt/2024/2024_SABR_MASTER_water.xlsm")
#
# colnames(X2024_SABR_MASTER_water)
#
# colnames(SABR_tile_MASTER_pre2024)
#
# # save both as .csv in data/raw
#
# write_csv(X2024_SABR_MASTER_water, "data/raw/X2024_SABR_MASTER_water.csv")
# write_csv(SABR_tile_MASTER_pre2024, "data/raw/SABR_tile_MASTER_pre2024.csv")
library(tidyverse)
X2024_SABR_MASTER_water <- read_csv("data/raw/X2024_SABR_MASTER_water.csv")
# 2023 data
df_2023 <- SABR_tile_MASTER_pre2024 %>%
mutate(date = as.Date(date, format = "%Y%m%d"))
